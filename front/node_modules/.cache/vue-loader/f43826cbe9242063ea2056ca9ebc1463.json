{"remainingRequest":"C:\\Users\\multicampus\\Desktop\\Sub PJT II\\s02p12b103\\fooddeuk\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\multicampus\\Desktop\\Sub PJT II\\s02p12b103\\fooddeuk\\front\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!C:\\Users\\multicampus\\Desktop\\Sub PJT II\\s02p12b103\\fooddeuk\\front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\multicampus\\Desktop\\Sub PJT II\\s02p12b103\\fooddeuk\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\multicampus\\Desktop\\Sub PJT II\\s02p12b103\\fooddeuk\\front\\src\\views\\curation\\MyFeed.vue?vue&type=template&id=1f45f6fa&","dependencies":[{"path":"C:\\Users\\multicampus\\Desktop\\Sub PJT II\\s02p12b103\\fooddeuk\\front\\src\\views\\curation\\MyFeed.vue","mtime":1580431047407},{"path":"C:\\Users\\multicampus\\Desktop\\Sub PJT II\\s02p12b103\\fooddeuk\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\multicampus\\Desktop\\Sub PJT II\\s02p12b103\\fooddeuk\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\multicampus\\Desktop\\Sub PJT II\\s02p12b103\\fooddeuk\\front\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\multicampus\\Desktop\\Sub PJT II\\s02p12b103\\fooddeuk\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\multicampus\\Desktop\\Sub PJT II\\s02p12b103\\fooddeuk\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}